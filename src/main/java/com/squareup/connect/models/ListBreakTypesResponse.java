/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.squareup.connect.models.BreakType;
import com.squareup.connect.models.Error;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * The response to a request for a set of &#x60;BreakTypes&#x60;. Contains the requested &#x60;BreakType&#x60; objects. May contain a set of &#x60;Error&#x60; objects if the request resulted in errors.
 */
@ApiModel(description = "The response to a request for a set of `BreakTypes`. Contains the requested `BreakType` objects. May contain a set of `Error` objects if the request resulted in errors.")

public class ListBreakTypesResponse {
  @JsonProperty("break_types")
  private List<BreakType> breakTypes = new ArrayList<BreakType>();

  @JsonProperty("cursor")
  private String cursor = null;

  @JsonProperty("errors")
  private List<Error> errors = new ArrayList<Error>();

  public ListBreakTypesResponse breakTypes(List<BreakType> breakTypes) {
    this.breakTypes = breakTypes;
    return this;
  }

  public ListBreakTypesResponse addBreakTypesItem(BreakType breakTypesItem) {
    this.breakTypes.add(breakTypesItem);
    return this;
  }

   /**
   *  A page of `BreakType` results.
   * @return breakTypes
  **/
  @ApiModelProperty(value = " A page of `BreakType` results.")
  public List<BreakType> getBreakTypes() {
    return breakTypes;
  }

  public void setBreakTypes(List<BreakType> breakTypes) {
    this.breakTypes = breakTypes;
  }

  public ListBreakTypesResponse cursor(String cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Value supplied in the subsequent request to fetch the next next page of Break Type results.
   * @return cursor
  **/
  @ApiModelProperty(value = "Value supplied in the subsequent request to fetch the next next page of Break Type results.")
  public String getCursor() {
    return cursor;
  }

  public void setCursor(String cursor) {
    this.cursor = cursor;
  }

  public ListBreakTypesResponse errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public ListBreakTypesResponse addErrorsItem(Error errorsItem) {
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Any errors that occurred during the request.
   * @return errors
  **/
  @ApiModelProperty(value = "Any errors that occurred during the request.")
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListBreakTypesResponse listBreakTypesResponse = (ListBreakTypesResponse) o;
    return Objects.equals(this.breakTypes, listBreakTypesResponse.breakTypes) &&
        Objects.equals(this.cursor, listBreakTypesResponse.cursor) &&
        Objects.equals(this.errors, listBreakTypesResponse.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(breakTypes, cursor, errors);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListBreakTypesResponse {\n");
    
    sb.append("    breakTypes: ").append(toIndentedString(breakTypes)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

