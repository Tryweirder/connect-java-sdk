/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A defined break template that sets an expectation for possible &#x60;Break&#x60;  instances on a &#x60;Shift&#x60;.
 */
@ApiModel(description = "A defined break template that sets an expectation for possible `Break`  instances on a `Shift`.")

public class BreakType {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("location_id")
  private String locationId = null;

  @JsonProperty("break_name")
  private String breakName = null;

  @JsonProperty("expected_duration")
  private String expectedDuration = null;

  @JsonProperty("is_paid")
  private Boolean isPaid = null;

  @JsonProperty("version")
  private Integer version = null;

  @JsonProperty("created_at")
  private String createdAt = null;

  @JsonProperty("updated_at")
  private String updatedAt = null;

  public BreakType id(String id) {
    this.id = id;
    return this;
  }

   /**
   * UUID for this object.
   * @return id
  **/
  @ApiModelProperty(value = "UUID for this object.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public BreakType locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

   /**
   * The ID of the business location this type of break applies to.
   * @return locationId
  **/
  @ApiModelProperty(required = true, value = "The ID of the business location this type of break applies to.")
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }

  public BreakType breakName(String breakName) {
    this.breakName = breakName;
    return this;
  }

   /**
   * A human-readable name for this type of break. Will be displayed to employees in Square products.
   * @return breakName
  **/
  @ApiModelProperty(required = true, value = "A human-readable name for this type of break. Will be displayed to employees in Square products.")
  public String getBreakName() {
    return breakName;
  }

  public void setBreakName(String breakName) {
    this.breakName = breakName;
  }

  public BreakType expectedDuration(String expectedDuration) {
    this.expectedDuration = expectedDuration;
    return this;
  }

   /**
   * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision below minutes is truncated.
   * @return expectedDuration
  **/
  @ApiModelProperty(required = true, value = "Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision below minutes is truncated.")
  public String getExpectedDuration() {
    return expectedDuration;
  }

  public void setExpectedDuration(String expectedDuration) {
    this.expectedDuration = expectedDuration;
  }

  public BreakType isPaid(Boolean isPaid) {
    this.isPaid = isPaid;
    return this;
  }

   /**
   * Whether this break counts towards time worked for compensation purposes.
   * @return isPaid
  **/
  @ApiModelProperty(required = true, value = "Whether this break counts towards time worked for compensation purposes.")
  public Boolean getIsPaid() {
    return isPaid;
  }

  public void setIsPaid(Boolean isPaid) {
    this.isPaid = isPaid;
  }

  public BreakType version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If a value is not provided, Square's servers execute a \"blind\" write; potentially  overwriting another writer's data.
   * @return version
  **/
  @ApiModelProperty(value = "Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If a value is not provided, Square's servers execute a \"blind\" write; potentially  overwriting another writer's data.")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }

  public BreakType createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * A read-only timestamp in RFC 3339 format.
   * @return createdAt
  **/
  @ApiModelProperty(value = "A read-only timestamp in RFC 3339 format.")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public BreakType updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * A read-only timestamp in RFC 3339 format.
   * @return updatedAt
  **/
  @ApiModelProperty(value = "A read-only timestamp in RFC 3339 format.")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BreakType breakType = (BreakType) o;
    return Objects.equals(this.id, breakType.id) &&
        Objects.equals(this.locationId, breakType.locationId) &&
        Objects.equals(this.breakName, breakType.breakName) &&
        Objects.equals(this.expectedDuration, breakType.expectedDuration) &&
        Objects.equals(this.isPaid, breakType.isPaid) &&
        Objects.equals(this.version, breakType.version) &&
        Objects.equals(this.createdAt, breakType.createdAt) &&
        Objects.equals(this.updatedAt, breakType.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, locationId, breakName, expectedDuration, isPaid, version, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BreakType {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    breakName: ").append(toIndentedString(breakName)).append("\n");
    sb.append("    expectedDuration: ").append(toIndentedString(expectedDuration)).append("\n");
    sb.append("    isPaid: ").append(toIndentedString(isPaid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

