/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.squareup.connect.models.V1ModifierOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * V1ModifierList
 */
@ApiModel(description = "V1ModifierList")

public class V1ModifierList {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item. See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values
   */
  public enum SelectionTypeEnum {
    SINGLE("SINGLE"),
    
    MULTIPLE("MULTIPLE");

    private String value;

    SelectionTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SelectionTypeEnum fromValue(String text) {
      for (SelectionTypeEnum b : SelectionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("selection_type")
  private SelectionTypeEnum selectionType = null;

  @JsonProperty("modifier_options")
  private List<V1ModifierOption> modifierOptions = new ArrayList<V1ModifierOption>();

  @JsonProperty("v2_id")
  private String v2Id = null;

  public V1ModifierList id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The modifier list's unique ID.
   * @return id
  **/
  @ApiModelProperty(value = "The modifier list's unique ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public V1ModifierList name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The modifier list's name.
   * @return name
  **/
  @ApiModelProperty(value = "The modifier list's name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public V1ModifierList selectionType(SelectionTypeEnum selectionType) {
    this.selectionType = selectionType;
    return this;
  }

   /**
   * Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item. See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values
   * @return selectionType
  **/
  @ApiModelProperty(value = "Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item. See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values")
  public SelectionTypeEnum getSelectionType() {
    return selectionType;
  }

  public void setSelectionType(SelectionTypeEnum selectionType) {
    this.selectionType = selectionType;
  }

  public V1ModifierList modifierOptions(List<V1ModifierOption> modifierOptions) {
    this.modifierOptions = modifierOptions;
    return this;
  }

  public V1ModifierList addModifierOptionsItem(V1ModifierOption modifierOptionsItem) {
    this.modifierOptions.add(modifierOptionsItem);
    return this;
  }

   /**
   * The options included in the modifier list.
   * @return modifierOptions
  **/
  @ApiModelProperty(value = "The options included in the modifier list.")
  public List<V1ModifierOption> getModifierOptions() {
    return modifierOptions;
  }

  public void setModifierOptions(List<V1ModifierOption> modifierOptions) {
    this.modifierOptions = modifierOptions;
  }

  public V1ModifierList v2Id(String v2Id) {
    this.v2Id = v2Id;
    return this;
  }

   /**
   * The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
   * @return v2Id
  **/
  @ApiModelProperty(value = "The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.")
  public String getV2Id() {
    return v2Id;
  }

  public void setV2Id(String v2Id) {
    this.v2Id = v2Id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1ModifierList v1ModifierList = (V1ModifierList) o;
    return Objects.equals(this.id, v1ModifierList.id) &&
        Objects.equals(this.name, v1ModifierList.name) &&
        Objects.equals(this.selectionType, v1ModifierList.selectionType) &&
        Objects.equals(this.modifierOptions, v1ModifierList.modifierOptions) &&
        Objects.equals(this.v2Id, v1ModifierList.v2Id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, selectionType, modifierOptions, v2Id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1ModifierList {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    selectionType: ").append(toIndentedString(selectionType)).append("\n");
    sb.append("    modifierOptions: ").append(toIndentedString(modifierOptions)).append("\n");
    sb.append("    v2Id: ").append(toIndentedString(v2Id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

