/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.api;

import com.squareup.connect.ApiClient;
import com.squareup.connect.ApiException;
import com.squareup.connect.Configuration;
import com.squareup.connect.auth.OAuth;
import com.squareup.connect.models.Address;
import com.squareup.connect.models.CaptureTransactionResponse;
import com.squareup.connect.models.ChargeRequest;
import com.squareup.connect.models.ChargeResponse;
import com.squareup.connect.models.CreateRefundRequest;
import com.squareup.connect.models.CreateRefundResponse;
import com.squareup.connect.models.ListRefundsResponse;
import com.squareup.connect.models.ListTransactionsResponse;
import com.squareup.connect.models.Money;
import com.squareup.connect.models.RetrieveTransactionResponse;
import com.squareup.connect.models.Transaction;
import com.squareup.connect.models.VoidTransactionResponse;
import com.squareup.connect.utils.APITest;
import com.squareup.connect.utils.Account;
import java.util.UUID;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * API tests for TransactionsApi
 */
public class TransactionsApiTest extends APITest {

    private final ApiClient defaultClient = Configuration.getDefaultApiClient();
    private final TransactionsApi api = new TransactionsApi();
    private final String cardNonce = "fake-card-nonce-ok";
    private String locationId;


    @Before
    public void setup() {
        Account testAccount = accounts.get("US-Prod-Sandbox");
        OAuth oauth2 = (OAuth) defaultClient.getAuthentication("oauth2");
        oauth2.setAccessToken(testAccount.accessToken);
        this.locationId = testAccount.locationId;
    }

    /**
     * CaptureTransaction
     *
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void captureTransactionTest() throws ApiException {
        Transaction transaction = api.charge(locationId, new ChargeRequest()
            .idempotencyKey(UUID.randomUUID().toString())
            .delayCapture(true)
            .amountMoney(new Money()
                .amount(200L)
                .currency("USD"))
            .cardNonce(cardNonce)).getTransaction();

        CaptureTransactionResponse response = api.captureTransaction(locationId, transaction.getId());

        assertTrue(response.getErrors().isEmpty());
    }

    /**
     * Charge
     *
     * Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - &#x60;buyer_email_address&#x60; - At least one of &#x60;billing_address&#x60; or &#x60;shipping_address&#x60;  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chargeTest() throws ApiException {
        // Check different sandbox values here https://docs.connect.squareup.com/articles/using-sandbox

        String idempotencyKey = UUID.randomUUID().toString();
        ChargeRequest body = new ChargeRequest()
            .idempotencyKey(idempotencyKey)
            .amountMoney(new Money()
                .amount(200L)
                .currency("USD"))
            .cardNonce(cardNonce)
            .shippingAddress(new Address()
                .addressLine1("123 Main St")
                .locality("San Francisco")
                .administrativeDistrictLevel1("CA")
                .postalCode("94114")
                .country("US"))
            .billingAddress(new Address()
                .addressLine1("500 Electric Ave")
                .addressLine2("Suite 600")
                .administrativeDistrictLevel1("NY")
                .locality("New York")
                .postalCode("10003")
                .country("US"))
            .referenceId("optional reference #112358")
            .note("optional note");

        ChargeResponse response = api.charge(locationId, body);

        assertTrue(response.getErrors().isEmpty());
        assertNotNull(response.getTransaction().getId());
    }

    /**
     * CreateRefund
     *
     * Initiates a refund for a previously charged tender.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRefundTest() throws ApiException {
        Transaction transaction = api.charge(locationId, new ChargeRequest()
            .idempotencyKey(UUID.randomUUID().toString())
            .amountMoney(new Money()
                .amount(200L)
                .currency("USD"))
            .cardNonce(cardNonce)).getTransaction();


        String idempotencyKey = UUID.randomUUID().toString();
        CreateRefundRequest body = new CreateRefundRequest()
            .idempotencyKey(idempotencyKey)
            .tenderId(transaction.getTenders().get(0).getId())
            .amountMoney(new Money()
                .amount(100L)
                .currency("USD"))
            .reason("Cancelled order");
        CreateRefundResponse response = api.createRefund(locationId, transaction.getId(), body);

        assertTrue(response.getErrors().isEmpty());
        assertNotNull(response.getRefund().getId());
    }

    /**
     * ListRefunds
     *
     * Lists refunds for one of a business&#39;s locations.  Refunds with a &#x60;status&#x60; of &#x60;PENDING&#x60; are not currently included in this endpoint&#39;s response.  Max results per [page](#paginatingresults): 50
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRefundsTest() throws ApiException {
        String beginTime = null;
        String endTime = null;
        String sortOrder = null;
        String cursor = null;

        ListRefundsResponse response = api.listRefunds(locationId, beginTime, endTime, sortOrder, cursor);
        assertTrue(response.getErrors().isEmpty());
        assertFalse(response.getRefunds().isEmpty());
    }

    /**
     * ListTransactions
     *
     * Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws ApiException {
        String beginTime = null;
        String endTime = null;
        String sortOrder = null;
        String cursor = null;
        ListTransactionsResponse response = api.listTransactions(locationId, beginTime, endTime, sortOrder, cursor);
        assertTrue(response.getErrors().isEmpty());
        assertFalse(response.getTransactions().isEmpty());
    }

    /**
     * RetrieveTransaction
     *
     * Retrieves details for a single transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTransactionTest() throws ApiException {
        Transaction transaction = api.charge(locationId, new ChargeRequest()
            .idempotencyKey(UUID.randomUUID().toString())
            .amountMoney(new Money()
                .amount(200L)
                .currency("USD"))
            .cardNonce(cardNonce)).getTransaction();

        RetrieveTransactionResponse response = api.retrieveTransaction(locationId, transaction.getId());

        assertTrue(response.getErrors().isEmpty());
        assertEquals(transaction.getId(), response.getTransaction().getId());
    }

    /**
     * VoidTransaction
     *
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voidTransactionTest() throws ApiException {
        Transaction transaction = api.charge(locationId, new ChargeRequest()
            .idempotencyKey(UUID.randomUUID().toString())
            .delayCapture(true)
            .amountMoney(new Money()
                .amount(200L)
                .currency("USD"))
            .cardNonce(cardNonce)).getTransaction();

        VoidTransactionResponse response = api.voidTransaction(locationId, transaction.getId());

        assertTrue(response.getErrors().isEmpty());
    }

}
